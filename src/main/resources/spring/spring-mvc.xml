<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-4.1.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

    <!-- 静态资源访问 -->
    <mvc:resources location="/images/" mapping="/images/**"/>
    <mvc:resources location="/scripts/" mapping="/scripts/**"/>
    <mvc:resources location="/styles/" mapping="/styles/**"/>

    <!-- 启动spring mvc的注解功能，完成请求和注解POJO的映射 -->
    <mvc:annotation-driven/>
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean
                        class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    <aop:aspectj-autoproxy />
    <!--上文件上传解析 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 上传文件时需要用到的分解器，默认将编码转为utf-8 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!--文件的最大上传大小 -->
        <property name="maxUploadSize" value="10000000"/>
    </bean>

    <!-- jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewNames" value="*.ftl"/>
        <property name="order" value="1"/>
    </bean>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    </bean>

    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>

    <bean id="freeMarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="file:${freemarker.template.file.path}"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
            </map>
        </property>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">${freemarker.template_update_delay}</prop>
                <prop key="defaultEncoding">${freemarker.defaultEncoding}</prop>
                <prop key="url_escaping_charset">${freemarker.url_escaping_charset}</prop>
                <prop key="locale">${freemarker.locale}</prop>
                <prop key="boolean_format">${freemarker.boolean_format}</prop>
                <prop key="time_format">${freemarker.time_format}</prop>
                <prop key="datetime_format">${freemarker.datetime_format}</prop>
                <prop key="date_format">${freemarker.date_format}</prop>
                <prop key="number_format">${freemarker.number_format}</prop>
                <prop key="auto_import">${freemarker.auto_import}</prop>
                <prop key="whitespace_stripping">${freemarker.whitespace_stripping}</prop>
            </props>
        </property>
    </bean>

    <!-- FreeMarker的配置 -->
    <bean id="freeMarkerConfigurer"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
            </map>
        </property>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">${freemarker.template_update_delay}</prop>
                <prop key="defaultEncoding">${freemarker.defaultEncoding}</prop>
                <prop key="url_escaping_charset">${freemarker.url_escaping_charset}</prop>
                <prop key="locale">${freemarker.locale}</prop>
                <prop key="boolean_format">${freemarker.boolean_format}</prop>
                <prop key="time_format">${freemarker.time_format}</prop>
                <prop key="datetime_format">${freemarker.datetime_format}</prop>
                <prop key="date_format">${freemarker.date_format}</prop>
                <prop key="number_format">${freemarker.number_format}</prop>
                <prop key="auto_import">${freemarker.auto_import}</prop>
                <prop key="whitespace_stripping">${freemarker.whitespace_stripping}</prop>
            </props>
        </property>
    </bean>

    <!-- 配置 FreeMarker视图解析器 -->
    <bean id="freemakerViewResolver"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="com.isoftstone.demo.common.web.servlet.view.freemarker.FreeMakerView"/>
        <!-- 掃描路徑內所有以ftl結尾的文件 -->
        <property name="viewNames" value="*.ftl"/>
        <property name="cache" value="false"/>
        <property name="prefix" value=""/>
        <property name="suffix" value=""/>
        <!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
        <property name="contentType" value="text/html; charset=UTF-8"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="requestContextAttribute" value="request"/>
        <!-- 給視圖解析器配置優先級，你可以給之前jsp視圖解析器的值配為2 -->
        <property name="order" value="2"/>
    </bean>

    <!-- 登陆时验证码的配置 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <!--通过构造函数注入属性值 -->
                <constructor-arg type="java.util.Properties">
                    <props>
                        <!-- 验证码宽度 -->
                        <prop key="kaptcha.image.width">${kaptcha.image.width}</prop>
                        <!-- 验证码高度 -->
                        <prop key="kaptcha.image.height">${kaptcha.image.height}</prop>
                        <!-- 生成验证码内容范围 -->
                        <prop key="kaptcha.textproducer.char.string">${kaptcha.textproducer.char.string}</prop>
                        <!-- 验证码个数 -->
                        <prop key="kaptcha.textproducer.char.length">${kaptcha.textproducer.char.length}</prop>
                        <!-- 是否有边框 -->
                        <prop key="kaptcha.border">${kaptcha.border}</prop>
                        <!-- 验证码字体颜色 -->
                        <prop key="kaptcha.textproducer.fonts.color">${kaptcha.textproducer.font.color}</prop>
                        <!-- 验证码字体大小 -->
                        <prop key="kaptcha.textproducer.font.size">${kaptcha.textproducer.font.size}</prop>
                        <!-- 验证码所属字体样式 -->
                        <prop key="kaptcha.textproducer.fonts.names">${kaptcha.textproducer.font.names}</prop>
                        <prop key="kaptcha.background.clear.from">${kaptcha.background.clear.from}</prop>
                        <prop key="kaptcha.background.clear.to">${kaptcha.background.clear.to}</prop>
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <!-- 干扰线颜色 -->
                        <prop key="kaptcha.noise.color">${kaptcha.noise.color}</prop>
                        <!-- 验证码文本字符间距 -->
                        <prop key="kaptcha.textproducer.char.space">${kaptcha.textproducer.char.space}</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
</beans>