/** * */package com.isoftstone.demo.cache.intercepter;import java.io.Serializable;import net.sf.ehcache.Cache;import net.sf.ehcache.Element;import org.aopalliance.intercept.MethodInterceptor;import org.aopalliance.intercept.MethodInvocation;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.InitializingBean;/** * @author 姚丰利(lidey) *         创建时间：2012-12-3 下午2:36:32 */public abstract class BaseCacheInterceptor implements MethodInterceptor,        InitializingBean {    final Logger logger = LoggerFactory.getLogger(BaseCacheInterceptor.class);    private Cache cache;    /**     * @return the cache     */    public Cache getCache() {        return cache;    }    /**     * @param cache the cache to set     */    public void setCache(Cache cache) {        this.cache = cache;    }    @Override    public void afterPropertiesSet() throws Exception {        // TODO Auto-generated method stub    }    @Override    public Object invoke(MethodInvocation invocation) throws Throwable {        // TODO Auto-generated method stub        String targetName = invocation.getThis().getClass().getName();        String methodName = invocation.getMethod().getName();        Object[] arguments = invocation.getArguments();        String cacheKey = getCacheKey(targetName, methodName, arguments);        Element element = cache.get(cacheKey);        if (element == null) {            Object result = invocation.proceed();            if (result != null) {                logger.info("set into cache:" + cacheKey);                element = new Element(cacheKey, (Serializable) result);                cache.put(element);            }        } else {            logger.info("get into cache:" + cacheKey);        }        if (element != null)            return element.getObjectValue();        else            return null;    }    /**     * @param targetName     * @param methodName     * @param arguments     * @return     */    protected String getCacheKey(String targetName, String methodName,                                 Object[] arguments) {        StringBuffer sb = new StringBuffer();        sb.append(targetName).append(".").append(methodName);        if ((arguments != null) && (arguments.length != 0)) {            for (int i = 0; i < arguments.length; i++) {                sb.append("_").append(arguments[i]);            }        }        return sb.toString();    }}